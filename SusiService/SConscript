# Copyright AllSeen Alliance. All rights reserved.
#
#    Permission to use, copy, modify, and/or distribute this software for any
#    purpose with or without fee is hereby granted, provided that the above
#    copyright notice and this permission notice appear in all copies.
#
#    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
#    WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
#    MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
#    ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
#    WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
#    ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
#    OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

# sample usage:
# scons EVENTS_AND_ACTIONS=0 TARG=linux WS=off VARIANT=debug 
# defaults:
# EVENTS_AND_ACTIONS=1

import os

Import('env')

vars = Variables()

sersamp_env = env.Clone()

Export('sersamp_env')

# Import SUSI4 lib path
if os.environ.has_key('SUSI4_PATH'):
    sersamp_env.Append(LIBS = ['SUSI-4.00'])
    sersamp_env.Append(LIBPATH = os.environ['SUSI4_PATH'])

if sersamp_env['VARIANT'] == 'debug':
    sersamp_env.Append(CPPDEFINES = ['ER_DEBUG_AJSVCAPP=1'])
    sersamp_env.Append(CPPDEFINES = ['ER_DEBUG_AJSVCALL=1'])
    sersamp_env.Append(CPPDEFINES = ['AJ_DEBUG_RESTRICT=AJ_DEBUG_INFO'])

# build the service sample, based on command-line args
build_eventsandactions_default      = 1 # do    build by default

build_eventsandactions = ARGUMENTS.get('EVENTS_AND_ACTIONS', build_eventsandactions_default)

sersamp_env.Append(CPPPATH = [Dir('../')])
sersamp_env.Append(CPPPATH = [Dir('../../AppsCommon/inc')])
sersamp_env.Append(CPPPATH = [Dir('../../AppsCommon/target/' + sersamp_env['TARG'])])
sersamp_env.Append(CPPPATH = [Dir('../../../notification/inc')])

main_exe = 'SusiService'

srcs = ['SusiService.c']

common_samples_srcs = ['AppHandlers.c']

objs = []

common_samples_srcs.extend(['ConfigSample.c'])
objs.extend(sersamp_env.SConscript('../../../config/SConscript', {'config_env': sersamp_env}))

srcs.extend(['NotificationProducerSample.c'])
objs.extend(SConscript('../../../notification/src/NotificationProducer/SConscript', exports = {'notif_env': sersamp_env}))
objs.extend(SConscript('../../../notification/src/NotificationCommon/SConscript', exports = {'notif_env': sersamp_env}))

srcs.extend(['ControlPanelGenerated.c', 'ControlPanelProvided.c', 'ControlPanelSample.c'])
objs.extend(SConscript('../../../controlpanel/SConscript', {'cps_env': sersamp_env}))

if int(build_eventsandactions):
    sersamp_env.Append(CPPDEFINES = ['EVENTS_AND_ACTIONS'])
    srcs.extend(['EventsAndActionsSample.c'])

# SUSI functions
sersamp_env.Append(CPPDEFINES = ['SUSI'])
srcs.extend(['SusiMethods.c'])
srcs.extend(['SusiBoard.c'])
srcs.extend(['SusiVGA.c'])
srcs.extend(['SusiI2C.c'])
srcs.extend(['SusiWDog.c'])
srcs.extend(['SusiGPIO.c'])

objs.extend(sersamp_env.Object(srcs))

sersamp_env['common_samples_srcs'] = common_samples_srcs
objs.extend(sersamp_env.SConscript('../../AppsCommon/SConscript', variant_dir = 'AppsCommon', duplicate = 1, exports = {'appsCommon_env': sersamp_env}))

objs.extend(sersamp_env.SConscript('../../../services_common/SConscript', variant_dir = 'services_common', duplicate = 1, exports = {'services_common_env': sersamp_env}))

prog = sersamp_env.Program(
    target = main_exe,
    source = [
              objs,
              sersamp_env['aj_obj'],
    ]
 )
sersamp_env.Install('../build', prog)
